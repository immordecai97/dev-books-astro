---
import { getCollection, render } from "astro:content";
import { SHOW_BUY_BUTTON } from "astro:env/server";
import Layout from "../../layout/Layout.astro";
import BuyButton from "../../components/BuyButton.astro";
import BookScore from "../../components/BookScore.astro";

export const getStaticPaths = async () => {
	const books = await getCollection("books");

	return books.map((book: any) => ({
		params: { id: book.slug },
		props: { book },
	}));
};

const { book } = Astro.props;
const { data, slug, url } = book;
const { title, author, img, readtime, description, buy } = data;

const { Content } = await render(book);

/**
 * En Astro, export const prerender = true; indica que una página o componente se renderizará estáticamente 
 * (genera HTML en tiempo de construcción) en lugar de dinámicamente en el servidor o cliente.
 * 
 * Por qué: Optimiza el rendimiento al servir HTML pregenerado,
 * reduciendo la carga en el servidor y mejorando la velocidad de carga.
 * 
 * Es el comportamiento predeterminado en Astro para páginas estáticas,
 * pero se puede desactivar con prerender = false si necesitas renderizado dinámico (SSR).
 */
export const prerender = true; // o sea que siga siendo estática (SSG, Static Site Generation) y no SSR (Server Side Rendering)
---

<Layout title={`${title} - Dev Books`}>
	<div class="flex gap-12">
		<aside class="flex flex-col items-center gap-4">
			<a href="/" class="hover:underline opacity-70">← Volver atrás</a>
			<img
				transition:name={`img-${slug}`}
				class="rounded w-72 h-auto"
				src={`/${img}`}
				alt={title}
			/>
			<!-- server:defer -> Es una directiva para diferir la ejecución de scripts del lado del servidor.
			Permite cargar scripts de manera asíncrona, mejorando el rendimiento al no bloquear la carga incial
			de la página.
			Indica que el script se ejecute en el servidor, pero su carga se pospone hasta que el navegador lo procese,
			útil para optimizar la hidratación de componentes o cargar recursos no críticos más tarde.

			PD: Código que se ejecuta en el servidor, pero se carga asíncronamente en el cliente
			se conoce como: "Isla de servidor" o  "Server islands"
			Quiere decir que creará un servidor donde lo que se necesite en tiempo real desde un cliente se solicitará
			al servidor y devolverá una respuesta. Para eso se debe establecer en la configuración una salida de servidor (output: 'server') 
			
			En otras palabras, básicamente añ establecer la salida como servidor, se establece un servidor donde los que será
			estatico será estatico y lo que será dinámico será dinamico, como devolución de datos en tiempo real-->
			<BookScore server:defer id={slug}>
				<!-- Cuando se usa componentes con server islands, para evitar saltos o huecos vacíos en el cliente
				dentro del mismo componente se pueden establecer fallbacks para cubrirlos.
				Para eso debes establecer una directiva: slot="fallback"  -->
				<span slot="fallback" class="text-xs opacity-70">Cargando puntuación</span>
			</BookScore>
			{SHOW_BUY_BUTTON && <BuyButton server:defer buy={buy} />}
		</aside>

		<main class="max-w-3xl">
			<h1
				transition:name={`title-${slug}`}
				class="text-4xl font-bold mb-4"
			>
				{title}
			</h1>
			<div class="prose prose-invert">
				<Content />
			</div>
		</main>
	</div>
</Layout>
